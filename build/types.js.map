{"version":3,"file":"types.js","sourceRoot":"","sources":["../src/types.ts"],"names":[],"mappings":"","sourcesContent":["// @needsAudit\r\nexport type DocumentPickerOptions = {\r\n  /**\r\n   * The [MIME type(s)](https://en.wikipedia.org/wiki/Media_type) of the documents that are available\r\n   * to be picked. It also supports wildcards like `'image/*'` to choose any image. To allow any type\r\n   * of document you can use `'&ast;/*'`.\r\n   * @default '&ast;/*'\r\n   */\r\n  type?: string | string[];\r\n  /**\r\n   * If `true`, the picked file is copied to [`FileSystem.CacheDirectory`](./filesystem#filesystemcachedirectory),\r\n   * which allows other Expo APIs to read the file immediately. This may impact performance for\r\n   * large files, so you should consider setting this to `false` if you expect users to pick\r\n   * particularly large files and your app does not need immediate read access.\r\n   * @default true\r\n   */\r\n  copyToCacheDirectory?: boolean;\r\n  /**\r\n   * Allows multiple files to be selected from the system UI.\r\n   * @default false\r\n   *\r\n   */\r\n  multiple?: boolean;\r\n};\r\n\r\nexport type DocumentPickerAsset = {\r\n  /**\r\n   * Document original name.\r\n   */\r\n  name: string;\r\n  /**\r\n   * Document size in bytes.\r\n   */\r\n  size?: number;\r\n  /**\r\n   * An URI to the local document file.\r\n   */\r\n  uri: string;\r\n  /**\r\n   * Document MIME type.\r\n   */\r\n  mimeType?: string;\r\n  /**\r\n   * Timestamp of last document modification.\r\n   */\r\n  lastModified?: number;\r\n  /**\r\n   * `File` object for the parity with web File API.\r\n   * @platform web\r\n   */\r\n  file?: File;\r\n  /**\r\n   * `FileList` object for the parity with web File API.\r\n   * @platform web\r\n   */\r\n  output?: FileList | null;\r\n};\r\n\r\n// @needsAudit @docsMissing\r\nexport type DocumentPickerResult = {\r\n  /**\r\n   * Boolean flag which shows if request was canceled. If asset data have been returned this should\r\n   * always be `false`.\r\n   */\r\n  canceled: boolean;\r\n  type?: string;\r\n  /**\r\n   * Document original name.\r\n   */\r\n  name?: string;\r\n  /**\r\n   * Document size in bytes.\r\n   */\r\n  size?: number;\r\n  /**\r\n   * An array of picked assets or `null` when the request was canceled.\r\n   */\r\n  assets: DocumentPickerAsset[] | null;\r\n  /**\r\n   * An URI to the local document file.\r\n   */\r\n  uri?: string;\r\n  /**\r\n   * Document MIME type.\r\n   */\r\n  mimeType?: string;\r\n  /**\r\n   * Timestamp of last document modification.\r\n   */\r\n  lastModified?: number;\r\n  /**\r\n   * `File` object for the parity with web File API.\r\n   * @platform web\r\n   */\r\n  file?: File;\r\n  /**\r\n   * `FileList` object for the parity with web File API.\r\n   * @platform web\r\n   */\r\n  output?: FileList | null;\r\n} & (DocumentPickerSuccessResult | DocumentPickerCanceledResult);\r\n\r\n/**\r\n * @hidden\r\n */\r\nexport type DocumentPickerSuccessResult = {\r\n  canceled: false;\r\n  assets: DocumentPickerAsset[];\r\n};\r\n\r\n/**\r\n * @hidden\r\n */\r\nexport type DocumentPickerCanceledResult = {\r\n  canceled: true;\r\n  assets: null;\r\n};\r\n"]}